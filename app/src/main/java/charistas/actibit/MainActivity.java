package charistas.actibit;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.preference.PreferenceManager;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.Menu;
import android.view.MenuItem;
import android.content.SharedPreferences;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import charistas.actibit.api.AuthenticationActivity;
import charistas.actibit.api.QuickPreferences;

/**
 * This class is responsible for initializing and displaying the list of enabled activities.
 */
public class MainActivity extends AppCompatActivity {
    private static Menu menu = null;
    private static boolean signedIn = false;
    FitbitActivityAdapter adapter;

    /**
     * Checks whether the user has signed-in or not and prompts him to do so in the later case.
     * Configures the UI of the activity, by creating the layout that contains the enabled Fitbit
     * activities.
     * @param savedInstanceState The state generated by a previous instance of this activity
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_pick);
        setTitle(R.string.title_activity_pick);

        // If the user hasn't signed-in yet, display the appropriate dialog that tells him to do so
        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
        boolean authorized = prefs.getBoolean(QuickPreferences.HAVE_AUTHORIZATION, false);
        if (!authorized) {
            setSignedInMenuStatus(false);
            AlertDialog.Builder builder = new AlertDialog.Builder(this);
            builder.setMessage(getString(R.string.lets_sign_in))
                    .setCancelable(false)
                    .setPositiveButton(getString(R.string.action_sign_in), new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int id) {
                            Intent intent = new Intent(MainActivity.this, AuthenticationActivity.class);
                            MainActivity.this.startActivity(intent);
                        }
                    })
                    .setNegativeButton(getString(R.string.not_now), new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int id) {
                            Toast.makeText(MainActivity.this, getString(R.string.sign_in_later), Toast.LENGTH_LONG).show();

                        }
                    });
            AlertDialog alert = builder.create();
            alert.show();
        }
        else {
            setSignedInMenuStatus(true);
        }

        // Create the layout that displays the activities
        RecyclerView recList = (RecyclerView) findViewById(R.id.cardList);
        recList.setHasFixedSize(true);
        LinearLayoutManager llm = new LinearLayoutManager(this);
        llm.setOrientation(LinearLayoutManager.VERTICAL);
        recList.setLayoutManager(llm);
        adapter = new FitbitActivityAdapter(createList());
        recList.setAdapter(adapter);
    }

    /**
     * Create the list of all activities that are enabled. The user can enable or disable activities
     * in the Settings.
     * @return List of enabled activities
     */
    private List<FitbitActivity> createList() {
        SharedPreferences prefs = getSharedPreferences("charistas.actibit", MODE_PRIVATE);
        Map<String, String> activities = FitbitActivity.getActivities(prefs);
        List<FitbitActivity> result = new ArrayList<>();

        for (String activityName : activities.keySet()) {
            boolean activityEnabledStatus = prefs.getBoolean(activityName, true);
            if (!activityEnabledStatus) {
                continue;
            }
            FitbitActivity activity = new FitbitActivity();
            activity.setName(activityName);
            result.add(activity);
        }
        return result;
    }

    /**
     * Initializes the content of the current menu
     * @param menu The current menu
     * @return We must return 'true' for the menu to be displayed
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MainActivity.menu = menu;
        getMenuInflater().inflate(R.menu.menu_pick, menu);
        setSignedInMenuStatus(signedIn);
        return true;
    }

    /**
     * Handles the user's clicks on the  menu's items.
     * @param item The item that was clicked
     * @return True means that the system consumes the click here
     */
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();

        if (id == R.id.action_settings) {
            Intent intent = new Intent(this, SettingsActivity.class);
            startActivity(intent);
            return true;
        }
        else if (id == R.id.action_feedback) {
            sendFeedback();
            return true;
        }
        else if (id == R.id.action_sign_in) {
            if (signedIn) {
                // Forget any saved information from the previous authorization
                setSignedInMenuStatus(false);
                SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
                sharedPreferences.edit().remove(QuickPreferences.HAVE_AUTHORIZATION).apply();
                sharedPreferences.edit().remove(QuickPreferences.ACCESS_TOKEN).apply();
                sharedPreferences.edit().remove(QuickPreferences.USER_ID).apply();
                sharedPreferences.edit().remove(QuickPreferences.TOKEN_TYPE).apply();
                sharedPreferences.edit().remove(QuickPreferences.FULL_AUTHORIZATION).apply();
                Toast.makeText(this, getString(R.string.sign_in_later), Toast.LENGTH_LONG).show();
            }
            else {
                // Begin the sign-in process
                Intent intent = new Intent(MainActivity.this, AuthenticationActivity.class);
                MainActivity.this.startActivity(intent);
            }
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    /**
     * Send feedback to the app developer via e-mail.
     */
    public void sendFeedback() {
        Intent intent = new Intent(Intent.ACTION_SEND);
        intent.setType("message/rfc822");
        intent.putExtra(Intent.EXTRA_EMAIL, new String[]{"haritasi@gmail.com"});
        intent.putExtra(Intent.EXTRA_SUBJECT, "Feedback on Actibit app");
        try {
            startActivity(Intent.createChooser(intent, "Send mail..."));
        } catch (android.content.ActivityNotFoundException ex) {
            Toast.makeText(this, getString(R.string.no_email_clients), Toast.LENGTH_LONG).show();
        }
    }

    /**
     * Changes the label of the Sign-in/Sign-out menu option based on the given parameter.
     * @param status True if the user has signed-in, false otherwise
     */
    public void setSignedInMenuStatus(boolean status) {
        MainActivity.signedIn = status;

        if (menu != null) {
            MenuItem item = menu.findItem(R.id.action_sign_in);
            if (status) {
                item.setTitle(getApplicationContext().getResources().getString(R.string.action_sign_out));
            } else {
                item.setTitle(getApplicationContext().getResources().getString(R.string.action_sign_in));
            }
        }
    }
}
